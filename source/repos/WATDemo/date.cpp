/*************************************************************************
【文件名】                 （date.cpp)
【功能模块和目的】         （定义Date类的成员函数)
【开发者及日期】           （洪宇睿 2021.8.1)
*************************************************************************/
#include "date.h"

const unsigned int Date::
    DaysInMonth[2][13] = {{0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31},
                          {0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31},};
const unsigned int Date::GrigoreyYear = 365;
/*************************************************************************
【函数名称】       （Date)
【函数功能】       （默认构造函数)
【参数】           （空)
【返回值】         （空)
【开发者及日期】   （洪宇睿 2021.8.1)
*************************************************************************/
Date::Date() : uYear(m_uYear), uMonth(m_uMonth), uDay(m_uDay), uWeekDay(m_WeekDay) {
    m_uYear = 1;
    m_uMonth = 1;
    m_uDay = 1;
    m_WeekDay = 1;
}
/*************************************************************************
【函数名称】       (Date)
【函数功能】       （构造函数)
【参数】           （三个分别代表年月日的无符号短整型数)
【返回值】         （空)
【开发者及日期】   （洪宇睿 2021.8.1)
*************************************************************************/
Date::Date(unsigned int uYear,
           unsigned int uMonth,
           unsigned int uDay)
    : uYear(m_uYear), uMonth(m_uMonth), uDay(m_uDay), uWeekDay(m_WeekDay) {
    Set(uYear, uMonth, uDay);
}
/*************************************************************************
【函数名称】       （~Date)
【函数功能】       （析构函数)
【参数】           （空)
【返回值】         （空)
【开发者及日期】   （洪宇睿 2021.8.1)
*************************************************************************/
Date::~Date() {

}
/*************************************************************************
【函数名称】       （Date)
【函数功能】       （拷贝构造函数)
【参数】           （常引用的Date类对象date)
【返回值】         （空)
【开发者及日期】   （洪宇睿 2021.8.1)
*************************************************************************/
Date::Date(const Date& date)
    : uYear(m_uYear), uMonth(m_uMonth), uDay(m_uDay), uWeekDay(m_WeekDay) {
    m_uYear = date.m_uYear;
    m_uMonth = date.m_uMonth;
    m_uDay = date.m_uDay;
    m_WeekDay = date.m_WeekDay;
}
/*************************************************************************
【函数名称】       （operator=)
【函数功能】       （重载赋值运算符)
【参数】           （常引用的Date类对象date)
【返回值】         （空)
【开发者及日期】   （洪宇睿 2021.8.1)
*************************************************************************/
Date Date::operator=(const Date& date)
{
    if (this != &date) {
        m_uYear = date.m_uYear;
        m_uMonth = date.m_uMonth;
        m_uDay = date.m_uDay;
        m_WeekDay = date.m_WeekDay;
    }

    return *this;
}
/*************************************************************************
【函数名称】       （Set)
【函数功能】       （给Date类对象赋值)
【参数】           （三个分别代表年月日的无符号短整型数)
【返回值】         （空)
【开发者及日期】   （洪宇睿 2021.8.1)
*************************************************************************/
void Date::Set(unsigned int uYear,
               unsigned int uMonth = 1,
               unsigned int uDay = 1) {
    if (Date::IsValid(uYear, uMonth, uDay)) {
        m_uYear = uYear;
        m_uMonth = uMonth;
        m_uDay = uDay;
        m_WeekDay = this->InDays() % 7;
    }
}
/*************************************************************************
【函数名称】       （SetYear)
【函数功能】       （给Date类对象的m_uYear成员赋值)
【参数】           （代表小时的无符号短整型数)
【返回值】         （空)
【开发者及日期】   （洪宇睿 2021.8.6)
*************************************************************************/
void Date::SetYear(unsigned int uYear) {
    if (IsValid(uYear, m_uMonth, m_uDay)) {
        m_uYear = uYear;
    }
}
/*************************************************************************
【函数名称】       （SetMonth)
【函数功能】       （给Date类对象的m_uMonth成员赋值)
【参数】           （代表分钟的无符号短整型数)
【返回值】         （空)
【开发者及日期】   （洪宇睿 2021.8.6)
*************************************************************************/
void Date::SetMonth(unsigned int uMonth) {
    if (IsValid(m_uYear, uMonth, m_uDay)) {
        m_uMonth = uMonth;
    }
}
/*************************************************************************
【函数名称】       （SetDay)
【函数功能】       （给Date类对象的m_uDay成员赋值)
【参数】           （代表秒的无符号短整型数)
【返回值】         （空)
【开发者及日期】   （洪宇睿 2021.8.6)
*************************************************************************/
void Date::SetDay(unsigned int uDay) {
    if (IsValid(m_uYear, m_uMonth, uDay)) {
        m_uDay = uDay;
    }
}
/*************************************************************************
【函数名称】       （InDays)
【函数功能】       （返回当前Date对象表示的时间转成秒数的结果)
【参数】           （代表天的无符号短整型数)
【返回值】         （空)
【开发者及日期】   （洪宇睿 2021.8.6)
*************************************************************************/
unsigned int Date::InDays() const {
    unsigned int i;
    unsigned int uDays = 0;
    for (i = 1; i < uYear; i++) {
        uDays += GrigoreyYear + !IsLeapYear(i);
    }
    for (i = 1; i < uMonth; i++) {
        uDays += DaysInMonth[IsLeapYear(uYear)][i];
    }
    uDays += uDay;
    return uDays;
}
/*************************************************************************
【函数名称】       （IsLeapYear)
【函数功能】       （判断某一年份是否为闰年)
【参数】           （一个表示年份)
【返回值】         （布尔型,存储)
【开发者及日期】   （洪宇睿 2021.8.1)
*************************************************************************/
bool Date::IsLeapYear(unsigned int uYear) {
    if (uYear % 4 != 0 || (uYear % 100 == 0 && uYear % 400 != 0)) {
        return true;
    }
    return false;
}
/*************************************************************************
【函数名称】       （IsValid)
【函数功能】       （判断Date类对象是否有效)
【参数】           （三个分别代表时分秒的无符号短整型数)
【返回值】         （布尔型,存储Date类对象是否为有效日期)
【开发者及日期】   （洪宇睿 2021.8.1)
*************************************************************************/
bool Date::IsValid(unsigned int uYear,
    unsigned int uMonth, unsigned int uDay) {
    if (uMonth >= 1 && uMonth <= 12 && uYear > 0 &&
           (                    //verify the format of the date
               (uDay >= 1 && uDay <= 28) ||
               (uMonth != 2 && (uDay == 29 || uDay == 30)) ||
               ((uMonth % 7) % 2 == 1 && uDay == 31) ||
               (!IsLeapYear(uYear) && uDay == 29)
           )
       ) {
        return true;
    }
    return false;
}
/*************************************************************************
【函数名称】       （operator==)
【函数功能】       （重载等于运算符)
【参数】           （常引用的Date类对象Date)
【返回值】         （布尔型,反对左侧日期是否等于右侧的结果)
【开发者及日期】   （洪宇睿 2021.8.1)
*************************************************************************/
bool Date::operator==(const Date &date) const {
    if (m_uYear == date.m_uYear && m_uMonth == date.m_uMonth
                              && m_uDay == date.m_uDay) {
        return true;
    }
    else {
        return false;
    }
}
/*************************************************************************
【函数名称】       （operator>)
【函数功能】       （重载大于运算符)
【参数】           （常引用的Date类对象date)
【返回值】         （布尔型,返回左侧日期是否大于右侧的结果)
【开发者及日期】   （洪宇睿 2021.8.1)
*************************************************************************/
bool Date::operator>(const Date &date) const {
    if ((m_uYear > date.m_uYear)
           || ((m_uYear == date.m_uYear) && (m_uMonth > date.m_uMonth))
               || ((m_uYear == date.m_uYear) && (m_uMonth == date.m_uMonth)
                   && (m_uDay > date.m_uDay))) {
        return true;
    }
    else {
        return false;
    }
}
/*************************************************************************
【函数名称】       （operator>=)
【函数功能】       （重载大于等于运算符)
【参数】           （常引用的Date类对象Date)
【返回值】         （布尔型,反对左侧日期是否大于等于右侧的结果)
【开发者及日期】   （洪宇睿 2021.8.5)
*************************************************************************/
bool Date::operator>=(const Date& date) const {
    return operator==(date) || operator>(date);
}
/*************************************************************************
【函数名称】       （operator<)
【函数功能】       （重载小于运算符)
【参数】           （常引用的Date类对象Date)
【返回值】         （布尔型,反对左侧日期是否小于右侧的结果)
【开发者及日期】   （洪宇睿 2021.8.5)
*************************************************************************/
bool Date::operator<(const Date& date) const {
    return !operator>=(date);
}
/*************************************************************************
【函数名称】       （operator<=)
【函数功能】       （重载小于等于运算符)
【参数】           （常引用的Date类对象Date)
【返回值】         （布尔型,反对左侧日期是否小于等于右侧的结果)
【开发者及日期】   （洪宇睿 2021.8.5)
*************************************************************************/
bool Date::operator<=(const Date& date) const {
    return !operator>(date);
}
/*************************************************************************
【函数名称】       （operator++())
【函数功能】       （重载左++运算符)
【参数】           （空)
【返回值】         （同一Date类对象)
【开发者及日期】   （洪宇睿 2021.8.7)
*************************************************************************/
Date& Date::operator++() {
    if (m_uMonth == 12 && m_uDay == 31) {
        m_uYear++;
        m_uMonth = 0;
    }
    if (m_uDay == DaysInMonth[IsLeapYear(m_uYear)][m_uMonth]) {
        m_uMonth++;
        m_uDay = 0;
    }
    m_uDay++;
    return *this;
}
/*************************************************************************
【函数名称】       （operator++(int))
【函数功能】       （重载右++运算符)
【参数】           （空)
【返回值】         （与原对象值相同的新建Date类对象)
【开发者及日期】   （洪宇睿 2021.8.7)
*************************************************************************/
Date Date::operator++(int) {
    Date date = (*this);
    if (m_uMonth == 12 && m_uDay == 31) {
        m_uYear++;
        m_uMonth = 0;
    }
    if (m_uDay == DaysInMonth[IsLeapYear(m_uYear)][m_uMonth]) {
        m_uMonth++;
        m_uDay = 0;
    }
    m_uDay++;
    return date;
}
/*************************************************************************
【函数名称】       （operator--())
【函数功能】       （重载左--运算符)
【参数】           （空)
【返回值】         （同一Date类对象)
【开发者及日期】   （洪宇睿 2021.8.7)
*************************************************************************/
Date& Date::operator--() {
    if (m_uMonth == 1 && m_uDay == 1) {
        m_uYear--;
        m_uMonth = 13;
    }
    if (m_uDay == 1) {
        m_uMonth--;
        m_uDay = DaysInMonth[IsLeapYear(uYear)][m_uMonth] + 1;
    }
    m_uDay--;
    return *this;
}
/*************************************************************************
【函数名称】       （operator(int))
【函数功能】       （重载右--运算符)
【参数】           （空)
【返回值】         （与原对象值相同的新建Date类对象)
【开发者及日期】   （洪宇睿 2021.8.7)
*************************************************************************/
Date Date::operator--(int) {
    Date Date = (*this);
    if (m_uMonth == 1 && m_uDay == 1) {
        m_uYear--;
        m_uMonth = 13;
    }
    if (m_uDay == 1) {
        m_uMonth--;
        m_uDay = DaysInMonth[IsLeapYear(uYear)][m_uMonth] + 1;
    }
    m_uDay--;
    return Date;
}
/*************************************************************************
【函数名称】       （operator-())
【函数功能】       （重载减法运算符)
【参数】           （空)
【返回值】         （整型数,两日期的代数差)
【开发者及日期】   （洪宇睿 2021.8.7)
*************************************************************************/
int Date::operator-(const Date& Date) const {
    return this->InDays() - Date.InDays();
}
/*************************************************************************
【函数名称】       （operator<<())
【函数功能】       （重载输出运算符)
【参数】           （输出流, 常引用的Date类对象)
【返回值】         （输出流对象)
【开发者及日期】   （洪宇睿 2021.8.7)
*************************************************************************/
ostream& operator<<(ostream& Stream, const Date& Date) {
    Stream << Date.uYear << "." << Date.uMonth << "." << Date.uDay;
    return Stream;
}
/*************************************************************************
【函数名称】       （operator>>())
【函数功能】       （重载输入运算符)
【参数】           （输入流, 接收的Date类对象)
【返回值】         （输入流对象)
【开发者及日期】   （洪宇睿 2021.8.7)
*************************************************************************/
istream& operator>>(istream& Stream, Date& Date) {
    char sep = '.';
    Stream >> Date.m_uYear >> sep >> Date.m_uMonth >> sep >> Date.m_uDay;
    return Stream;
}
